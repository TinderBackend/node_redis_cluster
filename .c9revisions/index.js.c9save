{"ts":1355996549389,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var redis = require('redis');\nvar redisClusterSlot = require('./redisClusterSlot');\nvar commands = require('./lib/commands');\n\nvar connectToLink = function(str, auth) {\n  var spl = str.split(':');\n  if (auth) {\n    return (redis.createClient(spl[1], spl[0]).auth(auth));\n  } else {\n    return (redis.createClient(spl[1], spl[0]));\n  }\n}\n\n/*\n  Connect to a node of a Redis Cluster, discover the other nodes and\n  respective slots with the \"CLUSTER NODES\" command, connect to them\n  and return an array of the links to all the nodes in the cluster.\n*/\nfunction connectToNodesOfCluster (firstLink, callback) {\n  var redisLinks = [];\n  var fireStarter = connectToLink(firstLink);\n  fireStarter.cluster('nodes', function(err, nodes) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    var lines = nodes.split('\\n');\n    var n = lines.length;\n    while (n--) {\n      var items = lines[n].split(' ');\n      var name = items[0];\n      var flags = items[2];\n      var link = (flags === 'myself') ? firstLink : items[1];\n      var lastPingSent = items[4];\n      var lastPongReceived = items[5];\n      var linkState = items[6];\n      var slots = items[7];\n\n      if (linkState === 'connected') {\n        redisLinks.push({name: name, link: connectToLink(link), slots: slots.split('-')});\n      }\n      if (n === 0) {\n        callback(err, redisLinks);\n      }\n    }\n  });\n}\n\n/*\n  Connect to all the nodes that form a cluster. Takes an array in the form of\n  [\n    {name: \"node1\", link: \"127.0.0.1:6379\", slots: [0, 2048], auth: foobared},\n    {name: \"node2\", link: \"127.0.0.1:7379\", slots: [2048, 4096], auth:foobared},\n  ]\n\n  *auth is optional\n\n  You decide the allocation of the 4096 slots, but they must be all covered, and\n  if you decide to add/remove a node from the \"cluster\", don't forget to MIGRATE\n  the keys accordingly to the new slots allocation.\n\n*/\nfunction connectToNodes (cluster) {\n  var redisLinks = [];\n  var n = cluster.length;\n  while (n--) {\n    var node = cluster[n];\n    redisLinks.push({\n      name: node.name,\n      link: connectToLink(node.link, node.auth),\n      slots: node.slots\n    });\n  }\n  return (redisLinks);\n}\n\n\nfunction bindCommands (nodes) {\n  var client = {};\n  client.nodes = nodes;\n  var n = nodes.length;\n  var c = commands.length;\n  while (c--) {\n    (function (command) {\n      client[command] = function () {\n        var o_arguments = Array.prototype.slice.call(arguments);\n        var o_callback = o_arguments.pop();\n        var slot = redisClusterSlot(o_arguments[0]);\n        var i = n;\n        while (i--) {\n          var node = nodes[i];\n          var slots = node.slots;\n          if ((slot >= slots[0]) && (slot <= slots[1])) {\n            node.link.send_command(command, o_arguments, o_callback);\n          }\n        }\n      }\n    })(commands[c]);\n  }\n  return(client);\n}\n\nmodule.exports.clusterClient = function (firstLink, callback) {\n  connectToNodesOfCluster(firstLink, function (err, nodes) {\n    callback(err, bindCommands(nodes));\n  });\n}\n\nmodule.exports.poorMansClusterClient = function (cluster, callback) {\n  return bindCommands(connectToNodes(cluster));\n}"]],"start1":0,"start2":0,"length1":0,"length2":3124}]],"length":3124}
{"contributors":[],"silentsave":false,"ts":1355996975364,"patch":[[{"diffs":[[0,"items[1];\n      "],[1,"//"],[0,"var lastPingSent"]],"start1":1017,"start2":1017,"length1":32,"length2":34},{"diffs":[[0,"s[4];\n      "],[1,"//"],[0,"var lastPong"]],"start1":1058,"start2":1058,"length1":24,"length2":26},{"diffs":[[0,".exports"],[-1,"."],[1," = {\n    "],[0,"clusterC"]],"start1":2841,"start2":2841,"length1":17,"length2":25},{"diffs":[[0,"  clusterClient "],[-1,"="],[1,":"],[0," function (first"]],"start1":2856,"start2":2856,"length1":33,"length2":33},{"diffs":[[0,"back) {\n"],[1,"    "],[0,"  connec"]],"start1":2899,"start2":2899,"length1":16,"length2":20},{"diffs":[[0,"r, nodes) {\n"],[1,"    "],[0,"    callback"]],"start1":2960,"start2":2960,"length1":24,"length2":28},{"diffs":[[0,";\n  "],[-1,"});\n}\n\nmodule.exports."],[1,"    });\n    },\n    "],[0,"poor"]],"start1":3014,"start2":3014,"length1":30,"length2":27},{"diffs":[[0,"rClient "],[-1,"="],[1,":"],[0," functio"]],"start1":3051,"start2":3051,"length1":17,"length2":17},{"diffs":[[0,"back) {\n"],[1,"    "],[0,"  return"]],"start1":3084,"start2":3084,"length1":16,"length2":20},{"diffs":[[0,"ster));\n"],[1,"    }\n"],[0,"}"]],"start1":3136,"start2":3136,"length1":9,"length2":15}]],"length":3151,"saved":false}
{"ts":1355997023490,"patch":[[{"diffs":[[0,");\n  }\n}"],[1,";"],[0,"\n\n/*\n  C"]],"start1":328,"start2":328,"length1":16,"length2":17},{"diffs":[[0,"   }\n      }"],[1,";"],[0,"\n    })(comm"]],"start1":2777,"start2":2777,"length1":24,"length2":25},{"diffs":[[0,"r));\n    }\n}"],[1,";"]],"start1":3141,"start2":3141,"length1":12,"length2":13}]],"length":3154,"saved":false}
